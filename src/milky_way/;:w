(ns milky-way.functions
  (:require
    [infix.macros :refer [infix from-string]]
    [clojure.core.matrix :as matrix])
  (:import
    [org.apache.commons.math3.analysis.function Log Tanh Tan Sin Cos
     [org.apache.commons.math3.util FastMath]]))

;; (def log* (Log.))
;; (def tan* (Tan.))
;; (def tanh* (Tanh.))
;; (def cos*  (Cos.))
;; (def sin*  (Sin.))

(defmacro  make-function [a-function]
  (let [the-function# '(new ~a-function)]
      `(fn [x] (.value ^ the-function# (double x)))))

(def pipa (atom nil))

(defmacro ->function [a-function]
   `(let [untaged-function# (new ~a-function)
          the-function#  #(vary-meta untaged-function# assoc :tag (new ~a-function))]
       (reset! pipa (meta the-function#))  
      #(.value the-function# (double %))))


(def log (->function Log))

(def tan  (make-function Tan.))

(def tanh (make-function Tanh.))

(def cos  (make-function Cos.))

(def sin (make-function Sin.))


(defn csc [x]
  (/ 1 (sin x)))


(defn  parametric-radius-spiral [A B N]
 (fn [phi]
   (infix A / log ( B * tan ( phi / (2 * N))))))


(defn    parametric-radius-ring [A B N]
 (fn [phi]
   (infix A / log ( B * tan ( phi / (2 * N))))))


(defn parametric-radius-spiral-derivative [A B N]
   (fn [phi]
    (infix phi -1 * A * csc (phi / N ) / (N * (log (B * tan(phi /(2 * N))) ** 2)))))


(defn spiral
  [x &  {:keys [A B N] :or {A 1 B 1 N 1}}]
  (let [r (parametric-radius-spiral A B N)]
    [(infix  r(x) *  sin(x)) (infix  r(x) * cos(x))]))


(defn spiral-galaxy-derivative
  [x &  {:keys [A B N] :or {A 1 B 1 N 1}}]
  (let [r ( parametric-radius-spiral A B N)
        r' (parametric-radius-spiral-derivative A B N)]
    [(infix r' sin(x) + r cos(x)) (infix r' cos(x) - r sin(x))]))

(defn fat-spiral [x fatness &  {:keys [A B N] :or {A 1 B 1 N 1}}])

(defn ring-galaxy
  [x &  {:keys [A B N] :or {A 1 B 1 N 1}}]
  (let [r      (/ A (log   (* B (tanh (/ x (* 2 N))))))]
    [(* r (sin x)) (* r (cos x))]))

